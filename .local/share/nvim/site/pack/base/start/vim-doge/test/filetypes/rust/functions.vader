# ==============================================================================
# Functions with parameters.
# ==============================================================================
Given rust (impl methods with parameters):
  struct Person {
      name: String,
  }
  
  impl Person {
      fn new(name: &str) -> Person {
          Person {
              name: name.to_string(),
          }
      }
  
      pub fn hello(&self) -> u8 {
          return 0;
      }
  }

Do (trigger doge):
  :6\<CR>
  \<C-d>
  :23\<CR>
  \<C-d>

Expect rust (generated comments with Arguments and Examples sections):
  struct Person {
      name: String,
  }
  
  impl Person {
      /// [TODO:description]
      ///
      /// # Arguments
      ///
      /// * `name` - [TODO:description]
      ///
      /// # Examples
      ///
      /// ```
      /// [TODO:example]
      /// ```
      fn new(name: &str) -> Person {
          Person {
              name: name.to_string(),
          }
      }
  
      /// [TODO:description]
      ///
      /// # Examples
      ///
      /// ```
      /// [TODO:example]
      /// ```
      pub fn hello(&self) -> u8 {
          return 0;
      }
  }

# ==============================================================================
# Functions with errors and safety section
# ==============================================================================
Given rust (impl methods with Errors and Safety section):
  pub unsafe fn foo(foo: usize) -> Result<(), FooError> {}

Do (trigger doge):
  \<C-d>

Expect rust (generated comments with Arguments, Safety, Errors and Examples sections):
  /// [TODO:description]
  ///
  /// # Arguments
  ///
  /// * `foo` - [TODO:description]
  ///
  /// # Safety
  ///
  /// [TODO:description]
  ///
  /// # Errors
  ///
  /// [TODO:description]
  ///
  /// # Examples
  ///
  /// ```
  /// [TODO:example]
  /// ```
  pub unsafe fn foo(foo: usize) -> Result<(), FooError> {}
