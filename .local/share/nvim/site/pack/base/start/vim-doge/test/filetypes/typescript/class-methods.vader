# ==============================================================================
# Functions with destructured parameters.
# ==============================================================================
Given typescript (functions with destructured parameters):
  class Test {
    @Test()
    @Test()
    test({ idUser, userModel }: { idUser: ObjectId, userModel: string }, p2?: boolean, p3? = false) {}

    @Test()
    async test(@Body() { idUser, userModel }: { error: string } & { idUser: ObjectId, userModel: string }, p2?: boolean, p3? = false): UserA & UserB {
      err = new CustomException();
      throw err;
      throw new CustomException();
    }
  }

Do (trigger doge):
  :4\<CR>
  \<C-d>
  :17\<CR>
  \<C-d>

Expect typescript (generated comment with a description, @param and @return tags):
  class Test {
    /**
     * [TODO:description]
     *
     * @param {[TODO:type]} [TODO:name] - [TODO:description]
     * @param {[TODO:type]} [TODO:name].idUser - [TODO:description]
     * @param {[TODO:type]} [TODO:name].userModel - [TODO:description]
     * @param {boolean} [p2] - [TODO:description]
     * @param {[TODO:type]} [p3] - [TODO:description]
     * @return {[TODO:type]} [TODO:description]
     */
    @Test()
    @Test()
    test({ idUser, userModel }: { idUser: ObjectId, userModel: string }, p2?: boolean, p3? = false) {}

    /**
     * [TODO:description]
     *
     * @async
     * @param {[TODO:type]} [TODO:name] - [TODO:description]
     * @param {[TODO:type]} [TODO:name].idUser - [TODO:description]
     * @param {[TODO:type]} [TODO:name].userModel - [TODO:description]
     * @param {boolean} [p2] - [TODO:description]
     * @param {[TODO:type]} [p3] - [TODO:description]
     * @throws {[TODO:name]} - [TODO:description]
     * @throws {CustomException} - [TODO:description]
     * @return {UserA & UserB} [TODO:description]
     */
    @Test()
    async test(@Body() { idUser, userModel }: { error: string } & { idUser: ObjectId, userModel: string }, p2?: boolean, p3? = false): UserA & UserB {
      err = new CustomException();
      throw err;
      throw new CustomException();
    }
  }

# ==============================================================================
# Functions with destructured parameters.
# ==============================================================================
Given typescript (constructor with decorator and scoped parameters):
  class Test {
    constructor(
      @InjectModel(User.name) private readonly $model: Model<T>,
      @InjectModel('User') private readonly model: Model<T> 
    ) {}
  }

Do (trigger doge):
  :2\<CR>
  \<C-d>

Expect typescript (generated comment with a description, @param and @return tags):
  class Test {
    /**
     * [TODO:description]
     *
     * @param {Model<T>} $model - [TODO:description]
     * @param {Model<T>} model - [TODO:description]
     * @return {[TODO:type]} [TODO:description]
     */
    constructor(
      @InjectModel(User.name) private readonly $model: Model<T>,
      @InjectModel('User') private readonly model: Model<T> 
    ) {}
  }
