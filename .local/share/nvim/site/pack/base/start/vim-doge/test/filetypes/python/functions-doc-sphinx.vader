# ==============================================================================
# Functions using the Sphinx doc standard.
# ==============================================================================
Given python(function without parameters without return type where b:doge_doc_standard='sphinx'):
  def myFunc():
    pass

Do (trigger doge):
  :let b:doge_doc_standard='sphinx'\<CR>
  \<C-d>

Expect python (generated comment with nothing but the text 'TODO'):
  def myFunc():
    """
    [TODO:description]

    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters without type hints without return type where b:doge_doc_standard='sphinx'):
  def myFunc(p1, p2, p3 = ''):
    pass

Do (trigger doge):
  :let b:doge_doc_standard='sphinx'\<CR>
  \<C-d>

Expect python (generated comment without type hints with defaults and optional):
  def myFunc(p1, p2, p3 = ''):
    """
    [TODO:description]

    :param p1: [TODO:description]
    :type p1: [TODO:type]
    :param p2: [TODO:description]
    :type p2: [TODO:type]
    :param p3: [TODO:description], defaults to ''
    :type p3: [TODO:type], optional
    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters with type hints without return type where b:doge_doc_standard='sphinx'):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []):
    pass

Do (trigger doge):
  :let b:doge_doc_standard='sphinx'\<CR>
  \<C-d>

Expect python (generated comment with type hints, defaults and optional):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []):
    """
    [TODO:description]

    :param p1: [TODO:description]
    :type p1: [TODO:type]
    :param p2: [TODO:description]
    :type p2: Callable[[int], None]
    :param p3: [TODO:description], defaults to []
    :type p3: Callable[[int, Exception], None], optional
    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters with type hints with return type where b:doge_doc_standard='sphinx'):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    pass

Do (trigger doge):
  :let b:doge_doc_standard='sphinx'\<CR>
  \<C-d>

Expect python (generated comment with :param, :type, :return and :rtype tags):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    """
    [TODO:description]

    :param p1: [TODO:description]
    :type p1: [TODO:type]
    :param p2: [TODO:description]
    :type p2: Callable[[int], None]
    :param p3: [TODO:description], defaults to []
    :type p3: Callable[[int, Exception], None], optional
    :return: [TODO:description]
    :rtype: Sequence[T]
    """
    pass

# ==============================================================================
# Read out the exceptions in the function body
# ==============================================================================
Given python (function with exceptions being raised in the body):
  def myFunc(p1 = 'string'):
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

Do (trigger doge):
  :let b:doge_doc_standard='sphinx'\<CR>
  \<C-d>

Expect python (generated comment with :param and :raises tags):
  def myFunc(p1 = 'string'):
    """
    [TODO:description]

    :param p1: [TODO:description], defaults to 'string'
    :type p1: [TODO:type], optional
    :raises [TODO:name]: [TODO:description]
    :raises Exception: [TODO:description]
    """
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass
