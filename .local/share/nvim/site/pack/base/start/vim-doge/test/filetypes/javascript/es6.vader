# ==============================================================================
# Fat-arrow functions without parameters.
# ==============================================================================
Given javascript (fat-arrow function without parameters):
  () => {}

Do (trigger doge):
  \<C-d>

Expect javascript (no generated comment):
  /**
   * [TODO:description]
   *
   * @return {[TODO:type]} [TODO:description]
   */
  () => {}

# ==============================================================================
# Fat-arrow functions with a single parameter without return type.
# ==============================================================================
Given javascript (fat-arrow function with a single parameter without return type):
  export const foo = bar => {
    return bar
  }

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @param and @return tags):
  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} bar - [TODO:description]
   * @return {[TODO:type]} [TODO:description]
   */
  export const foo = bar => {
    return bar
  }

# ==============================================================================
# Fat-arrow functions with parameters without type hints.
# ==============================================================================
Given javascript (fat-arrow function with parameters without type hints using 'const' and 'let' declarations):
  const myFunc = ($p1 = 'value', p2 = [], p3, p4) => {}

  let myFunc = ($p1 = 'value', p2 = [], p3, p4) => {}

Do (trigger doge):
  \<C-d>
  :13\<CR>
  \<C-d>

Expect javascript (generated comment with @param and @return tags):
  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} [$p1] - [TODO:description]
   * @param {[TODO:type]} [p2] - [TODO:description]
   * @param {[TODO:type]} p3 - [TODO:description]
   * @param {[TODO:type]} p4 - [TODO:description]
   * @return {[TODO:type]} [TODO:description]
   */
  const myFunc = ($p1 = 'value', p2 = [], p3, p4) => {}

  /**
   * [TODO:description]
   *
   * @param {[TODO:type]} [$p1] - [TODO:description]
   * @param {[TODO:type]} [p2] - [TODO:description]
   * @param {[TODO:type]} p3 - [TODO:description]
   * @param {[TODO:type]} p4 - [TODO:description]
   * @return {[TODO:type]} [TODO:description]
   */
  let myFunc = ($p1 = 'value', p2 = [], p3, p4) => {}

# ==============================================================================
# Fat-arrow functions with parameters with type hints.
# ==============================================================================
Given javascript (fat-arrow function with parameters with type hints):
  const myFunc = ($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[] => {}

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @param and @return tags):
  /**
   * [TODO:description]
   *
   * @param {string} [$p1] - [TODO:description]
   * @param {string[]} [p2] - [TODO:description]
   * @param {number} p3 - [TODO:description]
   * @param {float} p4 - [TODO:description]
   * @return {string[]} [TODO:description]
   */
  const myFunc = ($p1: string = 'value', p2: string[] = [], p3: number, p4: float): string[] => {}

# ==============================================================================
# Fat-arrow functions with destructuring.
# ==============================================================================
Given javascript (fat-arrow functions with destructuring):
  class Test {
    myMethod = ({ b: number }) => {
      return this.add(b);
    }

    static myMethod({ b: number }): number {
      return this.add(b);
    }
  }

Do (trigger doge):
  :2\<CR>
  \<C-d>
  :13\<CR>
  \<C-d>

Expect javascript (generated comments with @static, @param and @return tags):
  class Test {
    /**
     * [TODO:description]
     *
     * @param {[TODO:type]} [TODO:name] - [TODO:description]
     * @param {number} [TODO:name].b - [TODO:description]
     * @return {[TODO:type]} [TODO:description]
     */
    myMethod = ({ b: number }) => {
      return this.add(b);
    }

    /**
     * [TODO:description]
     *
     * @static
     * @param {[TODO:type]} [TODO:name] - [TODO:description]
     * @param {number} [TODO:name].b - [TODO:description]
     * @return {number} [TODO:description]
     */
    static myMethod({ b: number }): number {
      return this.add(b);
    }
  }

# ==============================================================================
# Fat-arrow functions with a specific scope.
# ==============================================================================
Given javascript (fat-arrow function with a specific scope):
  class Test {
    myMethod(public b: number) {
      return this.add(b);
    }
  }

Do (trigger doge):
  :2\<CR>
  \<C-d>

Expect javascript (generated comment with a description, @param and @return tags):
  class Test {
    /**
     * [TODO:description]
     *
     * @param {number} b - [TODO:description]
     * @return {[TODO:type]} [TODO:description]
     */
    myMethod(public b: number) {
      return this.add(b);
    }
  }

# ==============================================================================
# Prototype fat-arrow functions with parameters with type hints.
# ==============================================================================
Given javascript (prototype fat-arrow function with parameters with type hints):
  Person.prototype.greet = (p1: string = 'default', p2: Immutable.List = Immutable.List()): string[] => {};

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @function, @param and @return tags):
  /**
   * [TODO:description]
   *
   * @function Person#greet
   * @param {string} [p1] - [TODO:description]
   * @param {Immutable.List} [p2] - [TODO:description]
   * @return {string[]} [TODO:description]
   */
  Person.prototype.greet = (p1: string = 'default', p2: Immutable.List = Immutable.List()): string[] => {};

# ==============================================================================
# Prototype fat-arrow functions with parameters without type hints.
# ==============================================================================
Given javascript (prototype fat-arrow function without parameters without type hints):
  Person.prototype.greet = () => {};

Do (trigger doge):
  \<C-d>

  /**
   * [TODO:description]
   *
   * @return {[TODO:type]} [TODO:description]
   */
  Person.prototype.greet = () => {};

# ==============================================================================
# Fat-arrow functions with parameters with multiple type hints.
# ==============================================================================
Given javascript (fat-arrow function with parameters with multiple type hints):
  const myFunc = ($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) => {};

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @function, @param and @return tags):
  /**
   * [TODO:description]
   *
   * @param {string} $p1 - [TODO:description]
   * @param {Foo | Bar | Baz} p2 - [TODO:description]
   * @return {(Foo | Bar)} [TODO:description]
   */
  const myFunc = ($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) => {};

# ==============================================================================
# Async fat-arrow functions with parameters with multiple type hints.
# ==============================================================================
Given javascript (async fat-arrow function with parameters with multiple type hints):
  const myFunc = async ($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) => {};

Do (trigger doge):
  \<C-d>

Expect javascript (generated comment with @async, @function, @param and @return tags):
  /**
   * [TODO:description]
   *
   * @async
   * @param {string} $p1 - [TODO:description]
   * @param {Foo | Bar | Baz} p2 - [TODO:description]
   * @return {(Foo | Bar)} [TODO:description]
   */
  const myFunc = async ($p1: string, p2: Foo | Bar | Baz): (Foo | Bar) => {};
