# ==============================================================================
#
#                      Test the DogeCreateDocStandard command
#
# ==============================================================================

Execute (Create a new doc standard based on phpdoc, setup dummy pattern and execute the DogeCreateDocStandard command):
  if !has('nvim')
    let &runtimepath .= ',' . expand('~/.vim')
  endif
  enew
  setfiletype php
  let b:doge_patterns = {
    \  'phpdoc': [
    \    {
    \      'nodeTypes': [
    \        'property_declaration',
    \      ],
    \      'typeParameters': {
    \        'format': '@param {name} !description',
    \      },
    \      'template': [
    \        '/**',
    \        ' * @var {type|!type}',
    \        ' */',
    \      ],
    \    },
    \    {
    \      'nodeTypes': [
    \        'method_declaration',
    \        'function_definition',
    \      ],
    \      'parameters': {
    \        'format': '@param {type|!type} {name}%(default| (optional))% !description',
    \      },
    \      'exceptions': {
    \        'format': '@param {name} !description',
    \      },
    \      'template': [
    \        '/**',
    \        ' * !description',
    \        '%(parameters| *)%',
    \        '%(parameters| * {parameters})%',
    \        '%(isNoConstructorMethod| *)%',
    \        '%(isNoConstructorMethod| * @return {returnType|!type} !description)%',
    \        ' */',
    \      ],
    \    },
    \  ],
    \}
  DogeCreateDocStandard phpdoc

Then (Expect a file to be created with specific content):
  let b:path = ''
  for b:p in ['~/.vim', '~/vimfiles']
    let b:p = expand(b:p)
    if match(&runtimepath, b:p) >= 0
      let b:path = b:p
      break
    endif
  endfor
  if empty(b:path)
    if exists('*stdpath')
      let b:path = stdpath('config')
    else
      let b:path = getcwd()
    endif
  endif
  let b:path .= '/after/ftplugin/php.vim'
  AssertEqual expand(b:path), expand('%:p')

  let b:content = join([
  \  '" Preserve existing doge settings.',
  \  "let b:doge_patterns = get(b:, 'doge_patterns', {})",
  \  "let b:doge_supported_doc_standards = get(b:, 'doge_supported_doc_standards', [])",
  \  "if index(b:doge_supported_doc_standards, 'phpdoc_custom') < 0",
  \  "  call add(b:doge_supported_doc_standards, 'phpdoc_custom')",
  \  "endif",
  \  "",
  \  '" Set the new doc standard as default.',
  \  "let b:doge_doc_standard = 'phpdoc_custom'",
  \  "",
  \  '" Ensure we do not overwrite an existing doc standard.',
  \  "if !has_key(b:doge_patterns, 'phpdoc_custom')",
  \  "  let b:doge_patterns['phpdoc_custom'] = [",
  \  "        \\  {",
  \  "        \\    'nodeTypes': ['NODE_TYPE_A', 'NODE_TYPE_B'],",
  \  "        \\    'parameters': {",
  \  "        \\      'format': '@param {name} !description',",
  \  "        \\    },",
  \  "        \\    'template': [",
  \  "        \\      '/**',",
  \  "        \\      ' * @var {type|!type}',",
  \  "        \\      ' */',",
  \  "        \\    ],",
  \  "        \\  },",
  \  "        \\]",
  \  "endif",
  \], "\n")
  AssertEqual b:content, join(getline(line('^'), line('$')), "\n")
  unlet b:content
# Remove the buffer to ensure every test will create a new doc standard file.
  call delete(expand(b:path))
  bdelete!

Execute (Create a new doc standard for an unsupported filetype, setup dummy pattern and execute the DogeCreateDocStandard command):
  if !has('nvim')
    let &runtimepath .= ',' . expand('~/.vim')
  endif
  enew
  setfiletype foo
  DogeCreateDocStandard foo

Then (Expect a file to be created with specific content):
  let b:path = ''
  for b:p in ['~/.vim', '~/vimfiles']
    let b:p = expand(b:p)
    if match(&runtimepath, b:p) >= 0
      let b:path = b:p
      break
    endif
  endfor
  if empty(b:path)
    if exists('*stdpath')
      let b:path = stdpath('config')
    else
      let b:path = getcwd()
    endif
  endif
  let b:path .= '/after/ftplugin/foo.vim'
  AssertEqual expand(b:path), expand('%:p')

  let b:content = join([
  \  '" Preserve existing doge settings.',
  \  "let b:doge_patterns = get(b:, 'doge_patterns', {})",
  \  "let b:doge_supported_doc_standards = get(b:, 'doge_supported_doc_standards', [])",
  \  "if index(b:doge_supported_doc_standards, 'foo') < 0",
  \  "  call add(b:doge_supported_doc_standards, 'foo')",
  \  "endif",
  \  "",
  \  "let b:doge_parser = 'PARSER_NAME_HERE'",
  \  "let b:doge_insert = 'above'",
  \  "",
  \  '" Set the new doc standard as default.',
  \  "let b:doge_doc_standard = 'foo'",
  \  "",
  \  '" Ensure we do not overwrite an existing doc standard.',
  \  "if !has_key(b:doge_patterns, 'foo')",
  \  "  let b:doge_patterns['foo'] = [",
  \  "        \\  {",
  \  "        \\    'nodeTypes': ['NODE_TYPE_A', 'NODE_TYPE_B'],",
  \  "        \\    'parameters': {",
  \  "        \\      'format': '@param {name} !description',",
  \  "        \\    },",
  \  "        \\    'template': [",
  \  "        \\    ],",
  \  "        \\  },",
  \  "        \\]",
  \  "endif",
  \], "\n")
  AssertEqual b:content, join(getline(line('^'), line('$')), "\n")
  unlet b:content
# Remove the buffer to ensure every test will create a new doc standard file.
  call delete(expand(b:path))
  bdelete!
