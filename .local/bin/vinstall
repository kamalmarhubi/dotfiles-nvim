#!/bin/bash

# TODOs
# - actually install
# - allow specifying revision / commit / tag
# - rebuild doc tags

# Replace $0 in bash 5+ to make usage pretier; does nothing in earlier
# versions.
BASH_ARGV0="$(basename "$BASH_ARGV0")"

# Created by argbash-init v2.8.0
# ARG_OPTIONAL_INCREMENTAL([verbose],[v])]
# ARG_OPTIONAL_SINGLE([packdir],[p],[vim pack subdirectory to install into],[base])
# ARG_OPTIONAL_BOOLEAN([start],[s],[install in start])
# ARG_OPTIONAL_BOOLEAN([opt],[o],[install in opt (default)])
# ARG_OPTIONAL_BOOLEAN([dry-run],[n],[don't do anything])
# ARG_POSITIONAL_INF([repo],[git repo(s) to install as packages],[1])
# Declare all variables, even if not present, to make shellcheck happy.
# ARG_DEFAULTS_POS([])
# Indent with two spaces, to make me happy.
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Install vim plugin from a git repository using git-subtree(1)]))


set -o errexit
set -o nounset
set -o pipefail

function main() {
  check_preconds
  process_args

  for repo in "${_arg_repo[@]}"; do
    IFS='@' read -r -a repo_ref <<< "${repo}"
    repo="${repo_ref[0]}"
    local ref="${repo_ref[1]:-master}"
    repo="$(canonicalise_repo "${repo}")"
    local name
    name="$(get_repo_name "${repo}")"

    install "${repo}" "${ref}" "${_arg_packdir}" "${_arg_packtype}" "${name}"
  done
}

function drylog() {
  local level=0
  if (( $# == 2 )); then
    level="${1}"
    shift
  fi

  if [[ "$_arg_dry_run" = on ]]; then
    vlog "${level}" "${1}"
  fi
}

function vlog() {
  local level=1
  if (( $# == 2 )); then
    level="${1}"
    shift
  fi
  if (( level < _arg_verbose + 1 )); then
    echo "$1" >&2
  fi
}

function wetrun() {
  drylog 3 "would run: $*"
  if [[ "$_arg_dry_run" = on ]]; then
    return 0
  fi

  "$@"
}

function install() {
  local -r remote_url="${1}"
  local -r ref="${2}"
  local -r packdir="${3}"
  local -r packtype="${4}"
  local -r name="${5}"

  local -r target_dir="${packbase}/${packdir}/${packtype}/${name}"

  drylog "would install from ${remote_url}@${ref} into \$PACKBASE/${target_dir##${packbase}/}"

  local temp_remote="_vinstall_temp_${name}"
  drylog "adding temporary remote"
  git remote add "${temp_remote}" "${remote_url}"
  trap 'git remote remove ${temp_remote}' EXIT

  git fetch "${temp_remote}" "${ref}"
  local sha1
  sha1="$(git rev-parse FETCH_HEAD)"
  local disamb=
  if [[ ! ref =~ ^${sha1}$ ]]; then
    disamb=" ($(git rev-parse --short "${sha1}"))"
  fi

  wetrun git subtree add --squash --prefix="${target_dir}" \
    --message "Install ${name} at ${ref}${disamb}" \
    "${temp_remote}" "${ref}"

  git remote remove "${temp_remote}"
  trap - EXIT

  wetrun nvim -u NONE -c "packadd ${name}" -c 'helptags ALL' -cq
  wetrun find "${target_dir}/doc" -name tags \
    -execdir git add --force '{}' + \
    >/dev/null 2>&1 \
    || true
  wetrun git commit --amend --no-edit >/dev/null
}

function check_preconds() {
  command -v git &>/dev/null || die 'No git executable on PATH'
  command -v nvim &>/dev/null || die 'No nvim executable on PATH'

  git rev-parse --git-dir &>/dev/null \
    || die 'Need to be in a git repository or have GIT_DIR set, eg, via vcsh run'

  git diff-index --no-ext-diff --quiet HEAD \
    || die 'git repo is not clean; consider stashing or committing'
}

function process_args() {
  if  [[ "$_arg_start" = on  &&  "$_arg_opt" = on ]]; then
    die 'cannot specify both --start and --opt'
  fi

  declare -g _arg_packtype=opt
  if [[ "$_arg_start" = on ]]; then
    _arg_packtype=start
  fi

  local packbase_absolute="${XDG_DATA_HOME:-${HOME}/.local/share}/nvim/site/pack"
  packbase_absolute="$(readlink -f "${packbase_absolute}")"
  local git_root
  git_root="$(git rev-parse --show-toplevel)"

  # Put relative path to packbase in global scope.
  local packbase_relative="${packbase_absolute#${git_root}}"
  packbase_relative="${packbase_relative#/}"  # Strip leading slash if any.
  declare -rg packbase="${packbase_relative}"

  vlog 3 "packtype=${_arg_packtype}"
  vlog 3 "packdir=${_arg_packdir}"
  vlog 3 "dry-run=${_arg_dry_run}"
  vlog 3 "repos=${_arg_repo[*]}"
}

# Ugh assuming github because lazy and it's what ever other plugin manager
# thing does.
function canonicalise_repo() {
  local -r original_repo="$1"
  local repo="${original_repo}"

  case "$repo" in
    */*)
      repo="https://github.com/${repo}.git"
      ;;
  esac

  git ls-remote "$repo" HEAD &>/dev/null \
    || die "could not find repository: '$original_repo'"

  echo "$repo"
}

function get_repo_name() {
  local name="$1"
  name="${name##*/}"
  name="${name%.git}"
  echo "${name}"
}

# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='vpsonh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_repo=('' )
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose=0
_arg_packdir="base"
_arg_start="off"
_arg_opt="off"
_arg_dry_run="off"


print_help()
{
  printf '%s\n' "Install vim plugin from a git repository using git-subtree(1)"
  printf 'Usage: %s [-v|--verbose] [-p|--packdir <arg>] [-s|--(no-)start] [-o|--(no-)opt] [-n|--(no-)dry-run] [-h|--help] <repo-1> [<repo-2>] ... [<repo-n>] ...\n' "$0"
  printf '\t%s\n' "<repo>: git repo(s) to install as packages"
  printf '\t%s\n' "-p, --packdir: vim pack subdirectory to install into (default: 'base')"
  printf '\t%s\n' "-s, --start, --no-start: install in start (off by default)"
  printf '\t%s\n' "-o, --opt, --no-opt: install in opt (default) (off by default)"
  printf '\t%s\n' "-n, --dry-run, --no-dry-run: don't do anything (off by default)"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -v|--verbose)
        _arg_verbose=$((_arg_verbose + 1))
        ;;
      -v*)
        _arg_verbose=$((_arg_verbose + 1))
        _next="${_key##-v}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -p|--packdir)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_packdir="$2"
        shift
        ;;
      --packdir=*)
        _arg_packdir="${_key##--packdir=}"
        ;;
      -p*)
        _arg_packdir="${_key##-p}"
        ;;
      -s|--no-start|--start)
        _arg_start="on"
        test "${1:0:5}" = "--no-" && _arg_start="off"
        ;;
      -s*)
        _arg_start="on"
        _next="${_key##-s}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -o|--no-opt|--opt)
        _arg_opt="on"
        test "${1:0:5}" = "--no-" && _arg_opt="off"
        ;;
      -o*)
        _arg_opt="on"
        _next="${_key##-o}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-o" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -n|--no-dry-run|--dry-run)
        _arg_dry_run="on"
        test "${1:0:5}" = "--no-" && _arg_dry_run="off"
        ;;
      -n*)
        _arg_dry_run="on"
        _next="${_key##-n}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          { begins_with_short_option "$_next" && shift && set -- "-n" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'repo'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_repo "
  _our_args=$((${#_positionals[@]} - 1))
  for ((ii = 0; ii < _our_args; ii++))
  do
    _positional_names="$_positional_names _arg_repo[$((ii + 1))]"
  done

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

main

# ] <-- needed because of Argbash
